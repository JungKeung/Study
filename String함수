**startWith(시작과 함께)start 시작  with ~와함께** 문자열이 지정한 문자로 시작하는지 판단 같으면 true반환 아니면 false를 반환한다.(대소문자구별) 

```java
String str = "apple";
boolean startsWith = str.startsWith("a");
System.out.println("startsWith: " + startsWith);
```

결과 값 true

**endWith**(끝과 함께) end 끝 with ~와 함께 문자열 마지막에 지정한 문자가 있는지를 판단후 있으면

true 아니면 false

```java
String str = "test";
boolean endsWith = str.endsWith("t");
System.out.println("endsWith: " + endsWith);
```

결과 값 true

**equals**(동일한) 두개의 String에 값만을 비교해서 같으면 true, 다르면 false를 반환한다.

```java
String str1 = "java";
String str2 = "java";
boolean equals = str1.equals(str2); 
System.out.println("equals: " + equals);
```

결과값 true

**indexOf:**지정한 문자가 문자열에 몇번째에 있는지를 반환한다.

```java
String str = "abcdef";
int indexOf = str.indexOf("d");
System.out.println("indexOf: " + indexOf);
```

결과값 3

**lastindexOf:**문자열에 지정한 문자가 마지막몇번째에 있는 int를 반환한다.

```java
String str = "AdnroidApp";
int lastIndexOf = str.lastIndexOf("A");
System.out.println("lastIndexOf:" + lastIndexOf);
```

결과 값 7

**length:**문자열의 길이를 반환한다.

```java
String str = "abcdef";
int length = str.length();
System.out.println("length: " + length);
```

결과 값 6

**replace(대체하다,교체하다):**문자열에 지정한 문자" "가 있으면 새로 지정한 문자" "로 바꿔서 출력한다.

```java
String str = "A*B*C*D";
String replace = str.replace("*", "-");
System.out.println("replace: " + replace);

```

결과 값 A,B,C,D

**replaceAll:**정규표현식을 지정한 문자로 바꿔서 출력한다.

```java
String str = "AB CD";
String replaceAll = str.replaceAll("\\p{Space}", "*");
System.out.println("replaceAll: " + replaceAll);
```

결과 값 AB*CD

**split(스플릿,분열되다,갈라지다.자르다):**지정한 문자로 문자열을 나눌수 있다.(배열로 반환)

```java
String str = "A:B:C:D:abcd";
String[] split = str.split(":");
System.out.println("split: " + split[1]);
```

결과 값 B

**substring:**문자열에 지정한 범위에 속하는 문자열을 반환한다.(시작범위에 값은 포함하고, 끝나는 범위에 값은 포함하지않는다.)

```java
String str = "ABCDEF";
String substring = str.substring(0, 2);
System.out.println("substring: " + substring);
```

결과 값 AB

**toLowerCase(큰것을 낮추다):** 문자열에 대문자를 소문자로 변환한다.

```java
String str = "abcDEF";
String toLowerCase = str.toLowerCase();
System.out.println("toLowerCase: " + toLowerCase);
```

결과 값 abcdef

**toUpperCase:(낮은것을 높이다)**문자열에 소문자를 대문자로 변환한다.

```java
String str = "abcDEF";
String toUppercase = str.toUpperCase();
System.out.println("toUppercase: " + toUppercase);
```

결과값 ABCDEF

**toString:**문자열을 그대로 반환해준다.

toString 규약은 "모든 하위 클래스에서 이 메서드를 재정의하라

Object 클래스에 있는 toString 메소드,객체를 문자로 표현하는 메소드

```java
String str = "1234";
String toString = str.toString();
System.out.println("toString: " + toString);
```

결과값 1234

**valueOf:**지정한 개체의 원시 값을 반환

()괄호 안에 해당 객체를 String 객체로 변환시키는 역할을 한다.

```java
int i = 12345;
long l = 1L;
char c = '1';
System.out.println("valueOf: " + String.valueOf (i));
System.out.println("valueOf: " + String.valueOf (l));
System.out.println("valueOf: " + String.valueOf (c));
```

결과 값  i :  12345 , l : 1 , c : 1 

**compareTo(비교하다):**두개의 String를 앞에서부터 순사적으로 비교하다가 틀린부분이 있으면 비교하는 String에 캐릭터값을 반환한다.(대소문자를 구별)

```java
String str1 = "A";
String str2 = "B";
int compareTo = str1.compareTo(str2);
if(compareTo > 0){
       System.out.println(str1 + " > " +str2);
} else if (compareTo == 0){
       System.out.println(str1 + " = " +str2);
} else{
       System.out.println(str1 + " < " +str2);
```

 결과 값A < B

**contains(컨테인즈,포함하다):**두개의 String을 비교해서 비교대상 String을 포함하고 있으면true, 다르면 false를 반환한다.

```java
String str1 = "abcd";
String str2 = "c";
boolean contains = str1.contains(str2);
System.out.println("contains: " + contains);
```

결과 값 false

**charAt:**지정한 index번째에 문자를 반환한다.

```java
String str = "charAt";
char charAt = str.charAt(2);
System.out.println("charAt: " + charAt);
```

결과 값 a

**concat(concatenation 컨캐터네이트,연결하다 의 약자):**문자와 문자를 결합해준다.

```java
String str1 = "Han";
String str2 = "SeeJin";
String concat = str1.concat(str2);
System.out.println("concat: " + concat);
```

결과 값 HanSeeJin

**format():**서식문자열을 이용해서 서식화된 문자열을 반환한다.

%와 conversion(컨버전,변환)은 필수 항목

conversoin위치에는 출력되는 데이터의 타입을 입력하는데 s(문자열), d(정수), x(16진수), o(8진수), f(실수)가 들아갈 수 있습니다.

String format문 형식에서 언급했듯이 %는 필수이므로 코드는 %s, %d, %x, %o, %f로 사용됩니다.

```java
int i = 123456789;
String str = String.format("%,d", i);
System.out.println("format: " + str);
```

결과 값 123,456,789

**matches(매처즈,어울리다,일치하다):**지정한 정규 표현과 일치 할때 true를 반환한다.

```java
int i = 123456;
String str1 = String.format("%,d", i);
String str2 = "123456";
boolean matches = str1.matches(str2);
System.out.println("matches: " + matches);
```

결과 값 false

**replaceFirst:(첫번째로 교체하다,대체하다.)**문자열에 지정한 문자" "가 있으면 첫번째만 새로지정한 문자" "로 바꿔서 출력한다.

```java
String str = "Aman";
String replaceFirst = str.replaceFirst("A", "super");
System.out.println("replaceFirst: " + replaceFirst);
```

결과값 superman
