Big - O란?
알고리즘을 성능을 수학적으로 표현하는 표기법이다
Big-O을 통해 시간과 공간복잡도를 표현할수있다.
Big-O 표기법은 알고리즘의 러닝타임을 표시하는거보다 데이터나 사용자의 증가율에 따른 알고리즘성능을 알고자하는것이다

상수 시간
O(1) = constant time
F(int[] n) {
return (n[0] ==0)? true:false;
}
입력데이터와 상관없이 데이터가 일정한 시간을 걸리는 알고리즘을 말한다.

O(n) = linear time
F(int[] n) {
for i = 0 to n.length
print i
}
입력받는 크기에 비례해서 처리하는 시간을 말한다.   n이 하나 늘어날때마다 처리가 한번씩 늘어난다

O(n2) = quadratic time
F(int [] n) {
for i = 0 to n.length
for j = 0 to n.length
print i + j;
}
n이 하나씩 늘어나면서 n번씩 또 돌아야한다.

O(n3) = polynomial / cubic time
F(int[] n) {
for i = 0 to n.length
for j = 0 to n.length
for k = 0 to k.length
print i + j + k;
}
n2에 n을 한번더 더한것이다. 위에 코드와 같이 n을 3번 돌리면 n3이 된다.

O(2n) = exponential time
Fibonacci 수열은 1부터 시작해서 한면을 기준으로 정사각형을 만든다.
F(n, r) {
if ( n <= 0) return 0;
else if (n == 1) return r[n] = 1;
return r[n] = F(n - 1, r) + F(n - 2, r);
}
Fibonacci을 재귀함수로 구현해보면 위에 코드처럼 된다.  함수를 호출할때마다 바로전에 숫자랑 바로 전전 숫자를 알아야 더할수 있기때문에
해당 숫자를 알기위해서 하나를 뺀숫자를 가지고 한번 재귀호출하고 2개뺀 숫자를 가지고 한번더 호출한다.

O(log n)
대표적인 알고리즘은 binary search인 이진검색이다
F(k, arr, s,e) {
if (s > e) return -1;
m = (s + e) /2;
if (arr[m] == k) return m;
else if (arr[m] > k) return F(k,arr,s,m-1);
else return F(k,arr,m+1),e);
}

O(sqrt(n))

퀵 정렬(quick sort) 축이 되는 원소 하나를 무작위로 뽑은 뒤 이보다 작은 원소들은 앞에, 큰 원소들은 뒤에 놓이도록 원소의 위치를 바꾼다.
그 결과 부분 정렬(partial sort)이 완성되고, 그 뒤 왼쪽과 오른쪽 부분을이와 비슷한 방식으로 재귀적으로 정렬해 나간다.

최선의 경우
모든 원소가 동일하다면 퀵 정렬은 평균적으로 단순히 배열을 한 차례 순회하고 끝날것이다. 수행시간이 O(n)이 된다.

최악의 경우
만약 운이 없게도 배열에서 가장 큰 원소가 계속해서 축이 된다면 어떠할까?
이런 경우에는 재귀 호출이 배열을 절반 크기의 부분 배열로 나누지 못하고, 고작 하나 줄어든 크기의 부분 배열로 나누게 된다.
따라서 수행 시간은 O(n2)이라고 말할 수 있다.

평균의 경우
보통 위와 같이 아주 멋지거나 끔찍한 경우는 자주 바랭하지 않는다. 가끔 축이 되는 원소가 가장 작거나 가장 클 순 있지만.
이런일이 반복적으로 일어나는 경우가 많지 않다. 따라서 수행 시간이 평균으로 O(N lon N)이라고 말할수 있다.

공간복잡도
알고리즘에서는 시간뿐 아니라 메모리(혹은 공간) 또한 신경 써야한다.
공간 복잡도는 시간 복잡도와 평행선을 달리는 개념이다. 크기가 n인 배열을 만들고자 한다면, O(n)의 공간이 필요하다
nxn 크기의 2차원 배열을 만들고자 한다면 O(n2)의 공간이 필요하다

O(n2)
Bubble Sort*버블 정렬
O(n2)
Selection Sort 선택 정렬
O(n2)
Insertion Sort 삽입정렬
